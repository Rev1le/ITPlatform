# AUTOGENERATED FROM 'app/queries/get_answers.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetAnswersResult(NoPydanticValidation):
    id: uuid.UUID
    questions: list[GetAnswersResultQuestionsItem]
    codes: list[GetAnswersResultCodesItem]


@dataclasses.dataclass
class GetAnswersResultCodesItem(NoPydanticValidation):
    id: uuid.UUID
    question: str
    tests: list[GetAnswersResultCodesItemTestsItem]


@dataclasses.dataclass
class GetAnswersResultCodesItemTestsItem(NoPydanticValidation):
    id: uuid.UUID
    input: str
    output: str


@dataclasses.dataclass
class GetAnswersResultQuestionsItem(NoPydanticValidation):
    id: uuid.UUID
    question: str
    answers: list[str]
    right_answer: str


async def get_answers(
    executor: edgedb.AsyncIOExecutor,
    *,
    task_block_id: uuid.UUID,
) -> GetAnswersResult | None:
    return await executor.query_single(
        """\
        select TaskBlock {
            questions := .questions {
                id,
                question,
                answers,
                right_answer
            },
            codes := .codes {
                id,
                question,
                tests: {
                    input,
                    output
                }
            }
        }
        filter .id = <uuid>$task_block_id\
        """,
        task_block_id=task_block_id,
    )
