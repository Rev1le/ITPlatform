# AUTOGENERATED FROM 'app/queries/create_vacancy.edgeql' WITH:
#     $ python.exe -m edgedb.codegen


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateVacancyResult(NoPydanticValidation):
    id: uuid.UUID


async def create_vacancy(
    executor: edgedb.AsyncIOExecutor,
    *,
    employer_id: uuid.UUID,
    name: str,
    about: str,
    skills: list[str],
    company: str,
    salary: str | None,
    required_task_block_ids: list[uuid.UUID],
) -> CreateVacancyResult:
    return await executor.query_single(
        """\
        insert Vacancy {
            author := (select Employer filter .id = <uuid>$employer_id),
            name := <str>$name,
            description := <str>$about,
            skills := <array<str>>$skills,
            company := <str>$company,
            salary := <optional str>$salary,
            required_task_blocks := distinct (for x in array_unpack(<array<uuid>>$required_task_block_ids) union (
               select TaskBlock
               filter .id = <uuid>x
               limit 1
            ))
        }\
        """,
        employer_id=employer_id,
        name=name,
        about=about,
        skills=skills,
        company=company,
        salary=salary,
        required_task_block_ids=required_task_block_ids,
    )
